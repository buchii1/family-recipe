@page "/"
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>Home</PageTitle>

<HeadContent>
    <style>
        .recipe-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 20px;
        }

        .recipe-item {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: center;
        }

        .card-title {
            margin-bottom: .5rem;
            padding: 10px;
            /* margin: 0 auto; */
            margin-top: 5px;
        }

        .recipe-item img {
            max-width: 150px;
            height: auto;
            cursor: pointer;
        }

        .container {
            padding: 20px;
        }
    </style>
</HeadContent>

<!-- Assuming FeaturesSection is a separate component -->
<FeaturesSection />

<div class="container">
    <h3>Featured Recipes</h3>

    @if (recipes != null && recipes.Any())
    {
        <div class="recipe-grid">
            @foreach (var recipe in displayedRecipes)
            {
                <div class="recipe-item">
                    <img src="@recipe.RecipeImg" @onclick="() => NavigateToRecipe(recipe.RecipeId)" />
                    <h5 class="card-title">@recipe.Title</h5>
                </div>
            }
        </div>

        <div class="text-center mt-4">
            <button class="btn btn-primary" @onclick="ShowMore">Show More</button>
        </div>
    }
    else
    {
        <h6>No recipes to display...</h6>
    }
</div>

@code {
    // List to hold all loaded recipes
    private List<Recipe> recipes = new List<Recipe>();
    
    // List to hold recipes that are currently displayed
    private List<Recipe> displayedRecipes = new List<Recipe>();
    
    // Number of recipes to display at a time
    private const int DisplayCount = 6;

    // Method called when the component is initialized
    protected override async Task OnInitializedAsync()
    {
        // Load all recipes from the API
        await LoadRecipes();
        
        // Shuffle the recipes and select a subset for display
        ShuffleAndDisplayRecipes();
    }

    // Method to load recipes from the API
    private async Task LoadRecipes()
    {
        // Send an HTTP GET request to fetch the list of recipes
        var response = await Http.GetFromJsonAsync<List<Recipe>>("api/recipe");
        
        // If the response is not null, assign it to the recipes list
        if (response != null)
        {
            recipes = response;
        }
    }

    // Method to shuffle the recipes and select a subset for display
    private void ShuffleAndDisplayRecipes()
    {
        if (recipes.Any())
        {
            // Create a random number generator
            var random = new Random();
            
            // Shuffle the recipes and select a limited number for display
            displayedRecipes = recipes.OrderBy(r => random.Next()).Take(DisplayCount).ToList();
        }
    }

    // Method to navigate to a specific recipe detail page
    private void NavigateToRecipe(int recipeId)
    {
        // Redirect to the recipe detail page using the recipe ID
        Navigation.NavigateTo($"/recipe/{recipeId}");
    }

    // Method to navigate to the full list of recipes
    private void ShowMore()
    {
        // Redirect to the page displaying all recipes
        Navigation.NavigateTo("/recipes");
    }
}

