@page "/signup"
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager Navigation
@inject CustomStateProvider authStateProvider


    <div class="d-flex justify-content-center align-items-center vh-100">
        <div class="card p-4" style="width: 100%; max-width: 400px;">
            <div class="card-body">
                <h3 class="card-title text-center">Sign Up</h3>
                <EditForm OnValidSubmit="OnSubmit" Model="registerRequest">
                    <DataAnnotationsValidator />
                    
                    <div class="form-group mb-3">
                        <label for="UserName">Username:</label>
                        <input id="UserName" type="text" class="form-control" @bind="@registerRequest.UserName" />
                        <ValidationMessage For="@(() => registerRequest.UserName)" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="password">Password:</label>
                        <input id="password" type="password" class="form-control" @bind="@registerRequest.Password" required />
                        <ValidationMessage For="@(() => registerRequest.Password)" />
                    </div>

                    <div class="form-group mb-3">
                        <label for="passwordConfirm">Confirm Password:</label>
                        <input id="passwordConfirm" type="password" class="form-control" @bind="@registerRequest.PasswordConfirm" required />
                        <ValidationMessage For="@(() => registerRequest.PasswordConfirm)" />
                    </div>
                    
                    <button type="submit" class="btn btn-primary btn-block">Create account</button>

                    <label class="text-danger">@error</label>
                    <div class="mt-3">
                    <NavLink href="/signin" class="text-center">
                        <h6 class="">Already have an account? Sign In</h6>
                    </NavLink>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>

@code{
    // Instance of RegisterRequest to hold the registration data
    RegisterRequest registerRequest { get; set; } = new RegisterRequest();
    
    // Variable to store any error messages that occur during registration
    string error { get; set; }

    // Method to handle the form submission
    async Task OnSubmit()
    {
        // Reset the error message before attempting registration
        error = null;
        
        try
        {
            // Call the Register method of the authStateProvider to register the user
            await authStateProvider.Register(registerRequest);
            
            // Redirect the user to the profile update page upon successful registration
            Navigation.NavigateTo("/profile-update");
        }
        catch (Exception ex)
        {
            // Capture and display any error message that occurs during registration
            error = ex.Message;
        }
    }
}
