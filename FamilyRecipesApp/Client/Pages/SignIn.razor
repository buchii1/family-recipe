@page "/signin"
@using Microsoft.AspNetCore.Components.Forms
@inject NavigationManager Navigation
@inject CustomStateProvider authStateProvider

<!-- Your existing sign-in form code here -->


<div class="row1 row justify-content-center mt-5">
    <div class="col-md-4">
        <h3 class="text-center pb-3">Sign In</h3>
        <EditForm Model="@loginRequest" OnValidSubmit="OnSubmit">
            <DataAnnotationsValidator />
            @* <ValidationSummary /> *@

            <div class="form-group mb-3">
                <label for="username">UserName:</label>
                <InputText id="UserName" class="form-control" @bind-Value="loginRequest.UserName"
                    placeholder="UserName" />
                <ValidationMessage For="@(() => loginRequest.UserName)" />
            </div>

            <div class="form-group mb-3">
                <label for="password">Password:</label>
                <InputText id="password" class="form-control" type="password" @bind-Value="loginRequest.Password"
                    placeholder="Password" />
                <ValidationMessage For="@(() => loginRequest.Password)" />
            </div>

            <div class="form-group mb-3">
                <InputCheckbox id="inputRememberMe" class="form-check-input" @bind-Value="@loginRequest.RememberMe" />
                <label class="form-check-label" for="inputRememberMe">Remember Me</label>
            </div>

            <button type="submit" class="btn btn-primary">Sign In</button>

            <label class="text-danger">@error</label>

            <div class="mt-3">
                <NavLink href="signup">
                    <h6 class="font-weight-normal text-center">Create account</h6>
                </NavLink>
            </div>
        </EditForm>
        <hr />

    </div>
</div>


<style>
    .google-logo {
        height: 20px;
        margin-right: 10px;
    }

    .row1 {
        padding: 100px;
    }
</style>

@code {
    // Instance of LoginRequest to hold the login data
    LoginRequest loginRequest { get; set; } = new LoginRequest();

    // Variable to store any error messages that occur during login
    string error { get; set; }

    // Method to handle the form submission for login
    async Task OnSubmit()
    {
        // Reset the error message before attempting login
        error = null;

        try
        {
            // Call the Login method of the authStateProvider to authenticate the user
            await authStateProvider.Login(loginRequest);

            // Redirect the user to their profile page upon successful login
            Navigation.NavigateTo("/profile");
        }
        catch (Exception ex)
        {
            // Capture and display any error message that occurs during login
            error = ex.Message;
        }
    }
}
